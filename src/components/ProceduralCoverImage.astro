---
import { generateColors } from "./utils";

interface Props {
  id: string;
}
const { id } = Astro.props;
const properties = generateColors(id, [
  "#0A0310",
  "#49007E",
  "#FF005B",
  "#FF7D10",
  "#FFB238",
]);
---

<svg
  viewBox={"0 0 720 360"}
  fill="none"
  role="img"
  xmlns="http://www.w3.org/2000/svg"
  width={720}
  height={360}
  class="size-full"
>
  <g>
    <rect width={720} height={360} fill={properties[0]?.color}></rect>
    <path
      filter={`url(#filter_${id})`}
      d="M32.414 59.35L50.376 70.5H72.5v-71H33.728L26.5 13.381l19.057 27.08L32.414 59.35z"
      fill={properties[1]?.color}
      transform={"translate(" +
        (properties[1]?.translateX ?? 1) * 4.5 +
        " " +
        (properties[1]?.translateY ?? 1) * 2.25 +
        ") rotate(" +
        properties[1]?.rotate +
        " " +
        720 / 2 +
        " " +
        360 / 2 +
        ") scale(" +
        (properties[2]?.scale ?? 1) * 9 +
        ")"}></path>
    <path
      filter={`url(#filter_${id})`}
      style={{
        mixBlendMode: "overlay",
      }}
      d="M22.216 24L0 46.75l14.108 38.129L78 86l-3.081-59.276-22.378 4.005 12.972 20.186-23.35 27.395L22.215 24z"
      fill={properties[2]?.color}
      transform={"translate(" +
        (properties[2]?.translateX ?? 1) * 4.5 +
        " " +
        (properties[2]?.translateY ?? 1) * 2.25 +
        ") rotate(" +
        properties[2]?.rotate +
        " " +
        720 / 2 +
        " " +
        360 / 2 +
        ") scale(" +
        (properties[2]?.scale ?? 1) * 9 +
        ")"}></path>
  </g>
  <defs>
    <filter
      id={`filter_${id}`}
      filterUnits="userSpaceOnUse"
      color-interpolation-filters="sRGB"
    >
      <feFlood flood-opacity={0} result="BackgroundImageFix"></feFlood>
      <feBlend in="SourceGraphic" in2="BackgroundImageFix" result="shape"
      ></feBlend>
      <feGaussianBlur stdDeviation={7} result="effect1_foregroundBlur"
      ></feGaussianBlur>
    </filter>
  </defs>
</svg>
